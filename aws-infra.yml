---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template deploys a multi-tier, highly available web application architecture
  including a VPC, subnets, EC2 instances with Auto Scaling, an NLB,
  an RDS MariaDB cluster, and a CloudFront distribution with S3.

Resources:
  # The main virtual network for our resources in AWS.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # The main entry point for internet traffic to our VPC.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  # Connects the internet gateway to the VPC, allowing it to be used.
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # A subnet for resources that should be publicly accessible, like load balancers and web servers.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  # A second public subnet in a different Availability Zone for high availability.
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # A private subnet for resources that should not be directly accessible from the internet, like databases.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  # A second private subnet in a different Availability Zone for redundancy.
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  # A dedicated IP address for the NAT Gateway to use for internet communication.
  EIPforNATGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # A device that allows resources in the private subnets to connect to the internet for updates or downloads.
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPforNATGateway.AllocationId
      SubnetId: !Ref PublicSubnet1

  # A set of rules that directs traffic from the public subnets to the internet gateway.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # A rule that points all traffic destined for the internet (0.0.0.0/0) to the internet gateway.
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associates the first public subnet with the public route table.
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Associates the second public subnet with the public route table.
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # A set of rules that directs traffic from the private subnets to the NAT Gateway.
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # A rule that points all internet-bound traffic from the private subnets to the NAT gateway.
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Associates the first private subnet with the private route table.
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Associates the second private subnet with the private route table.
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # A firewall for our EC2 instances, allowing traffic from the load balancer and SSH from a specific IP.
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/HTTPS access from NLB and SSH access.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow all traffic from the NLB (using its security group).
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref NLBSecurityGroup

  # A firewall for our RDS instances, only allowing traffic from the EC2 instances.
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable MariaDB access from EC2 instances.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow MariaDB traffic (port 3306) from the EC2 instance security group.
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # The S3 bucket that will host the static website content.
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-website-bucket"
      AccessControl: Private

  # The configuration that securely connects CloudFront to the S3 bucket.
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-OAC"
        SigningBehavior: always
        SigningProtocol: sigv4
        OriginAccessControlOriginType: s3

  # The global content delivery network that caches and distributes content from S3.
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: MyS3Origin
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontOAC
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: MyS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
        DefaultRootObject: index.html
        Comment: CloudFront Distribution for My Website

  # A special EC2 instance used as a secure jump host to access resources in the VPC.
  SSMHostEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: "ami-0c55b159cbfafe1f0" # Amazon Linux 2 AMI
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: SSMHost

  # A launch template for our web servers, defining their instance type and security settings.
  AutoScalingLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: "ami-0c55b159cbfafe1f0" # Amazon Linux 2 AMI
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2SecurityGroup
      # UserData script to install a web server on launch.
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from the web server!</h1>" > /var/www/html/index.html

  # A service that automatically manages the number of web servers to handle traffic.
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref AutoScalingLaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref NLBTargetGroup
      Tags:
        - Key: Name
          Value: MyASG
          PropagateAtLaunch: true

  # The load balancer that distributes traffic evenly across the web servers.
  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: network
      Tags:
        - Key: Name
          Value: MyNLB

  # A group of resources (our EC2 instances) that the load balancer can send traffic to.
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: NLBTargetGroup
      VpcId: !Ref VPC
      Port: 80
      Protocol: TCP
      Targets:
        - Id: !Ref SSMHostEC2Instance
          Port: 80 # This is likely a placeholder, as the diagram shows ASG behind the NLB, but an SSM host is also in public subnet
      HealthCheckEnabled: true

  # The rules for the load balancer to listen for incoming web traffic on a specific port.
  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NLB
      Protocol: TCP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup

  # A group of subnets specifically for the RDS database to ensure it's in a private network.
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS DB
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # The MariaDB database cluster, which manages the master and replica instances.
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      Engine: mariadb
      EngineVersion: "10.6"
      MasterUsername: masteruser
      MasterUserPassword: "MySuperSecretPassword"
      StorageEncrypted: true
      DatabaseName: myappdb
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup

  # The main database instance that handles all write operations.
  RDSClusterMaster:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.small
      DBClusterIdentifier: !Ref RDSCluster
      Engine: mariadb
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: RDS-MariaDB-Master

  # A read-only copy of the master database for handling high volumes of read traffic.
  RDSClusterReplica:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.small
      DBClusterIdentifier: !Ref RDSCluster
      Engine: mariadb
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: RDS-MariaDB-Replica

  # An endpoint that allows resources in the private subnets to securely access the AWS Systems Manager service.
  SSMVPCGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
